name: Build EXE
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.1.0
          pip install aiofiles==23.2.1 aiohttp==3.11.13 fastapi==0.115.8 itsdangerous==2.2.0 numpy==2.2.2 openai==1.61.1 python-dotenv==1.0.1 python-jose==3.4.0 pyyaml==6.0.2 requests==2.32.3 uvicorn==0.34.0 chainlit==2.2.1
          # Install boto3 only minimally for Cognito
          pip install boto3==1.37.4 --no-deps
          pip install botocore==1.34.4 --no-deps
          pip install jmespath==1.0.1 s3transfer==0.10.0
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        shell: bash
      
      - name: Create version file
        run: |
          echo "__version__ = '${{ env.VERSION }}'" > src/version.py
      
      - name: Prepare app icon
        run: |
          pip install pillow
          mkdir -p resources
          python -c "from PIL import Image; img = Image.open('images/app_logo.png'); img.save('resources/app_icon.ico')"
        continue-on-error: true

      - name: Generate file version info
        run: |
          $version = "${{ env.VERSION }}"
          $version_comma = $version.Replace(".", ",")
          
          echo "# UTF-8
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=($version_comma,0),
              prodvers=($version_comma,0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo(
                [
                StringTable(
                  u'040904E4',
                  [StringStruct(u'CompanyName', u'DotACT AI'),
                  StringStruct(u'FileDescription', u'Keenmind - AI Assistant for Dota 2'),
                  StringStruct(u'FileVersion', u'${{ env.VERSION }}'),
                  StringStruct(u'InternalName', u'keenmind'),
                  StringStruct(u'LegalCopyright', u'Copyright Â© 2024 DotACT AI'),
                  StringStruct(u'OriginalFilename', u'keenmind.exe'),
                  StringStruct(u'ProductName', u'Keenmind'),
                  StringStruct(u'ProductVersion', u'${{ env.VERSION }}')])
                ]), 
              VarFileInfo([VarStruct(u'Translation', [1033, 1252])])
            ]
          )" > file_version_info.txt
        shell: pwsh

      - name: Build with PyInstaller
        run: |
          # Create application manifest with explicit security preferences
          echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
            <assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="DotACT.Keenmind.Client" type="win32"/>
            <description>Keenmind - AI Assistant for Dota 2</description>
            <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
              <security>
                <requestedPrivileges>
                  <requestedExecutionLevel level="highestAvailable" uiAccess="false"/>
                </requestedPrivileges>
              </security>
            </trustInfo>
            <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
              <application>
                <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"/>
                <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
                <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
                <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
                <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
              </application>
            </compatibility>
          </assembly>' > keenmind.manifest

          # Copy config files (except secrets) to build directory
          mkdir -p build/config
          Copy-Item "config/gsi_config.yaml" -Destination "build/config/"
          Copy-Item "config/ui_config.yaml" -Destination "build/config/"
          Copy-Item "config/cloud_config.yaml" -Destination "build/config/"

          # Build with more conservative options that are less likely to trigger AV
          pyinstaller --clean `
            --name keenmind `
            --icon="resources/app_icon.ico" `
            --manifest="keenmind.manifest" `
            --add-data "src;src" `
            --add-data "images/app_logo.png;images" `
            --add-data "build/config;config" `
            --hidden-import=fastapi `
            --hidden-import=chainlit `
            --hidden-import=aiofiles `
            --hidden-import=boto3.session `
            --hidden-import=boto3.resources.factory `
            --hidden-import=boto3.resources.model `
            --hidden-import=botocore.client `
            --hidden-import=botocore.credentials `
            --hidden-import=botocore.parsers `
            --hidden-import=botocore.auth `
            --hidden-import=botocore.hooks `
            --hidden-import=uvicorn.logging `
            --hidden-import=uvicorn.loops `
            --hidden-import=uvicorn.loops.auto `
            --hidden-import=uvicorn.protocols `
            --hidden-import=uvicorn.protocols.http `
            --hidden-import=uvicorn.protocols.http.auto `
            --hidden-import=uvicorn.lifespan `
            --hidden-import=uvicorn.workers `
            --hidden-import=pydantic `
            --collect-all chainlit `
            --noconfirm `
            --windowed `
            --version-file="file_version_info.txt" `
            --noupx `
            main.py
            
          # Create reputation-building files
          Set-Content -Path "dist/keenmind/README.txt" -Value "Keenmind v${{ env.VERSION }}`n`nOfficial website: https://github.com/dotact-ai/keenmind`nPublisher: DotACT AI`n`nThis software is safe to use.`n"
          
          # Create license agreement
          $licenseContent = @'
          END USER LICENSE AGREEMENT

          IMPORTANT: PLEASE READ THIS END USER LICENSE AGREEMENT CAREFULLY BEFORE INSTALLING OR USING KEENMIND SOFTWARE.

          1. ACCEPTANCE OF TERMS
          By installing, accessing, or using the Keenmind software ("Software"), you agree to be bound by the terms of this End User License Agreement ("Agreement"). If you do not agree to these terms, do not install, access, or use the Software.

          2. LICENSE GRANT
          Subject to the terms of this Agreement, DotACT AI grants you a limited, non-exclusive, non-transferable license to use the Software for your personal or internal business purposes.

          3. RESTRICTIONS
          You may not:
          (a) Modify, adapt, translate, reverse engineer, decompile, disassemble, or create derivative works based on the Software;
          (b) Rent, lease, loan, sell, distribute, or sublicense the Software;
          (c) Remove or alter any proprietary notices or labels on the Software;
          (d) Use the Software for any illegal purpose or in any manner that violates applicable laws or regulations.

          4. OWNERSHIP
          The Software is owned and copyrighted by DotACT AI. Your license confers no title or ownership in the Software and is not a sale of any rights in the Software.

          5. DISCLAIMER OF WARRANTIES
          THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT. DOTACT AI MAKES NO WARRANTY THAT THE SOFTWARE WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE.

          6. LIMITATION OF LIABILITY
          TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL DOTACT AI BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, CONSEQUENTIAL, OR PUNITIVE DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS INTERRUPTION, LOSS OF INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF DOTACT AI HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. IN ANY CASE, DOTACT AI'S ENTIRE LIABILITY UNDER ANY PROVISION OF THIS AGREEMENT SHALL BE LIMITED TO THE AMOUNT ACTUALLY PAID BY YOU FOR THE SOFTWARE.

          7. INDEMNIFICATION
          You agree to indemnify, defend, and hold harmless DotACT AI, its officers, directors, employees, agents, and suppliers from and against all claims, losses, expenses, damages, and costs, including reasonable attorneys' fees, resulting from any violation of this Agreement by you or any activity related to your account (including negligent or wrongful conduct) by you or any other person accessing the Software using your account.

          8. NO THIRD-PARTY BENEFICIARIES
          This Agreement does not confer any third-party beneficiary rights.

          9. WAIVER OF CLASS ACTIONS
          ANY DISPUTE RESOLUTION PROCEEDINGS, WHETHER IN ARBITRATION OR COURT, WILL BE CONDUCTED ONLY ON AN INDIVIDUAL BASIS AND NOT IN A CLASS OR REPRESENTATIVE ACTION OR AS A NAMED OR UNNAMED MEMBER IN A CLASS, CONSOLIDATED, REPRESENTATIVE OR PRIVATE ATTORNEY GENERAL LEGAL ACTION.

          10. GOVERNING LAW
          This Agreement shall be governed by and construed in accordance with the laws of the State of California without giving effect to any principles of conflicts of law. Any legal action or proceeding relating to this Agreement shall be brought exclusively in the state or federal courts located in San Francisco, California.

          11. AMENDMENTS
          DotACT AI reserves the right, at its sole discretion, to modify or replace this Agreement at any time.

          12. SURVIVAL
          Sections 3, 4, 5, 6, 7, 9, 10, and 12 shall survive termination of this Agreement.

          13. SECURITY AND DATA COLLECTION
          The Software does not collect any personal data beyond what is strictly necessary for authentication and functionality. All data processing is transparent and only with user consent.

          BY INSTALLING OR USING THE SOFTWARE, YOU ACKNOWLEDGE THAT YOU HAVE READ THIS AGREEMENT, UNDERSTAND IT, AND AGREE TO BE BOUND BY ITS TERMS AND CONDITIONS.
          '@
          Set-Content -Path "dist/keenmind/LICENSE.txt" -Value $licenseContent
        shell: pwsh
      
      - name: Create enhanced self-signed certificate
        run: |
          # Create a stronger self-signed certificate with more trusted attributes
          $cert = New-SelfSignedCertificate `
            -Subject "CN=DotACT AI Software, O=DotACT AI, L=San Francisco, S=California, C=US" `
            -Type CodeSigning `
            -CertStoreLocation Cert:\CurrentUser\My `
            -KeyUsage DigitalSignature `
            -KeyLength 4096 `
            -KeyAlgorithm RSA `
            -HashAlgorithm SHA256 `
            -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" `
            -NotAfter (Get-Date).AddYears(3) `
            -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
          
          $certPath = "Cert:\CurrentUser\My\$($cert.Thumbprint)"
          $pfxPath = "codesign.pfx"
          $password = ConvertTo-SecureString -String "password" -Force -AsPlainText
          Export-PfxCertificate -Cert $certPath -FilePath $pfxPath -Password $password
          
          # Add certificate to trusted root
          Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\LocalMachine\Root -Password $password
          Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\LocalMachine\TrustedPublisher -Password $password
          
          # Find signtool and sign the executable with extended attributes
          $signtoolPath = $null
          $possiblePaths = @(
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $signtoolPath = $path
              break
            }
          }
          
          if (-not $signtoolPath) {
            $signtoolPath = (Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1).FullName
          }
          
          if ($signtoolPath -and (Test-Path "dist\keenmind\keenmind.exe")) {
            Write-Host "Using signtool at: $signtoolPath"
            # Sign with enhanced attributes and timestamping
            & $signtoolPath sign /f $pfxPath /p "password" /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a /as /d "Keenmind - AI Assistant for Dota 2" /du "https://github.com/dotact-ai/keenmind" dist\keenmind\keenmind.exe
          } else {
            Write-Host "Signtool.exe not found or executable does not exist at expected path. Skipping code signing."
          }
        shell: pwsh
        continue-on-error: true
      
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
          
      - name: Create Inno Setup script
        run: |
          echo '[Setup]
          AppName=Keenmind
          AppVersion=${{ env.VERSION }}
          AppVerName=Keenmind ${{ env.VERSION }}
          AppPublisher=DotACT AI
          AppPublisherURL=https://github.com/dotact-ai/keenmind
          AppSupportURL=https://github.com/dotact-ai/keenmind/issues
          AppUpdatesURL=https://github.com/dotact-ai/keenmind/releases
          AppCopyright=Copyright Â© 2024 DotACT AI
          DefaultDirName={pf}\Keenmind
          DefaultGroupName=Keenmind
          LicenseFile=dist\keenmind\LICENSE.txt
          InfoBeforeFile=dist\keenmind\README.txt
          UninstallDisplayIcon={app}\keenmind.exe
          OutputDir=.
          OutputBaseFilename=keenmind_setup_${{ env.VERSION }}
          Compression=lzma2/ultra64
          SolidCompression=yes
          PrivilegesRequired=admin
          SetupIconFile=resources\app_icon.ico
          WizardStyle=modern
          WizardSizePercent=120
          WizardResizable=yes
          DisableDirPage=no
          DisableProgramGroupPage=no
          DisableReadyPage=no
          
          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop icon"; GroupDescription: "Additional icons:"; Flags: checkedonce
          
          [Files]
          Source: "dist\keenmind\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
          Source: "images\app_logo.png"; DestDir: "{app}\images"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\Keenmind"; Filename: "{app}\keenmind.exe"; Comment: "Launch Keenmind AI Assistant"
          Name: "{group}\Uninstall Keenmind"; Filename: "{uninstallexe}"
          Name: "{commondesktop}\Keenmind"; Filename: "{app}\keenmind.exe"; Tasks: desktopicon; Comment: "Launch Keenmind AI Assistant"
          
          [Run]
          Filename: "{app}\keenmind.exe"; Description: "Launch Keenmind"; Flags: nowait postinstall skipifsilent
          
          [Code]
          var
            SteamPathPage: TInputDirWizardPage;
            DefaultSteamPath: String;

          procedure InitializeWizard;
          begin
            { Create Steam path selection page }
            SteamPathPage := CreateInputDirPage(wpSelectDir,
              ''Steam Installation Folder'', 
              ''Where is Steam installed on your computer?'',
              ''The installer needs to know where Steam is installed to configure Dota 2 Game State Integration.'' + #13#10 +
              ''Please specify the location of your Steam installation folder (not the Dota 2 folder):'',
              False, '''');
              
            { Set default Steam path - common locations }
            if DirExists(ExpandConstant(''{pf}\Steam'')) then
              DefaultSteamPath := ExpandConstant(''{pf}\Steam'')
            else if DirExists(ExpandConstant(''{pf(x86)}\Steam'')) then
              DefaultSteamPath := ExpandConstant(''{pf(x86)}\Steam'')
            else if DirExists(ExpandConstant(''C:\Program Files\Steam'')) then
              DefaultSteamPath := ''C:\Program Files\Steam''
            else if DirExists(ExpandConstant(''C:\Program Files (x86)\Steam'')) then
              DefaultSteamPath := ''C:\Program Files (x86)\Steam''
            else
              DefaultSteamPath := ExpandConstant(''{pf(x86)}\Steam'');
              
            SteamPathPage.Add('''');
            SteamPathPage.Values[0] := DefaultSteamPath;
          end;

          function NextButtonClick(CurPageID: Integer): Boolean;
          var
            SteamPath, GsiConfigPath, YamlContent: String;
            YamlFile: String;
          begin
            Result := True;
            
            if CurPageID = SteamPathPage.ID then
            begin
              { Validate Steam path }
              SteamPath := SteamPathPage.Values[0];
              if not DirExists(SteamPath) then
              begin
                MsgBox(''The specified Steam folder does not exist. Please select a valid Steam installation folder.'', mbError, MB_OK);
                Result := False;
                Exit;
              end;
              
              { Check for steamapps folder }
              if not DirExists(SteamPath + ''\steamapps'') then
              begin
                MsgBox(''This does not appear to be a valid Steam installation. The steamapps folder was not found.'', mbError, MB_OK);
                Result := False;
                Exit;
              end;
              
              { Save GSI config path to YAML file in the app directory }
              GsiConfigPath := SteamPath + ''\steamapps\common\dota 2 beta\game\dota\cfg\gamestate_integration'';
              
              { Steam path config goes directly in the app directory }
              YamlFile := ExpandConstant(''{app}\steam_path.yaml'');
              
              { Create YAML content }
              YamlContent := ''steam:'' + #13#10 + 
                             ''  path: "'' + SteamPath + ''"'' + #13#10 +
                             ''  gsi_path: "'' + GsiConfigPath + ''"'' + #13#10;
              
              { Save YAML file }
              if not SaveStringToFile(YamlFile, YamlContent, False) then
              begin
                MsgBox(''Failed to save Steam path configuration. Please try again.'', mbError, MB_OK);
                Result := False;
              end;
            end;
          end;
          ' > inno_setup.iss

      - name: Build Inno Setup installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" inno_setup.iss
        shell: pwsh
          
      - name: Sign the installer
        run: |
          # Find signtool
          $signtoolPath = $null
          $possiblePaths = @(
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $signtoolPath = $path
              break
            }
          }
          
          if (-not $signtoolPath) {
            $signtoolPath = (Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1).FullName
          }
          
          # Sign the installer
          if ($signtoolPath -and (Test-Path "keenmind_setup_${{ env.VERSION }}.exe")) {
            Write-Host "Signing installer with signtool at: $signtoolPath"
            & $signtoolPath sign /f codesign.pfx /p "password" /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a /d "Keenmind Installer ${{ env.VERSION }}" /du "https://github.com/dotact-ai/keenmind" "keenmind_setup_${{ env.VERSION }}.exe"
          } else {
            Write-Host "Signtool.exe not found or installer does not exist at expected path. Skipping installer signing."
          }
        shell: pwsh
        continue-on-error: true
          
      - name: Create ZIP package of application files
        run: |
          # Add README to the zip
          Set-Content -Path "dist\keenmind\How_to_Install.txt" -Value "Keenmind Installation Instructions`n`n1. Extract this ZIP to a folder of your choice`n2. Right-click keenmind.exe and select 'Run as administrator'`n3. If Windows SmartScreen shows a warning, click 'More info' then 'Run anyway'`n`nThis software is safe to use.`n"
          Compress-Archive -Path dist\keenmind\* -DestinationPath keenmind_files_${{ env.VERSION }}.zip -Force
        shell: pwsh
          
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: keenmind-files-${{ env.VERSION }}
          path: keenmind_files_${{ env.VERSION }}.zip
          
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: keenmind-installer-${{ env.VERSION }}
          path: keenmind_setup_${{ env.VERSION }}.exe
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            keenmind_files_${{ env.VERSION }}.zip
            keenmind_setup_${{ env.VERSION }}.exe
          name: Release ${{ env.VERSION }}
          body: |
            # Keenmind Release ${{ env.VERSION }}
            
            This release contains the Keenmind AI Assistant for Dota 2.
            
            ## Installation
            
            ### Option 1: Using the Installer (Recommended)
            1. Download `keenmind_setup_${{ env.VERSION }}.exe`
            2. When your browser shows a security warning, click "Keep" or "Download anyway"
            3. Run the installer and follow the instructions
            
            ### Option 2: Manual Installation
            1. Download `keenmind_files_${{ env.VERSION }}.zip`
            2. Extract the contents to a folder of your choice
            3. Run `keenmind.exe` to start the application
            
            ## About Security Warnings
            
            Windows may show security warnings because this is a new application. These warnings are normal for new software and don't indicate any security issues.
            
            ## Need Help?
            
            If you encounter any issues during installation or usage, please open an issue on GitHub.

      - name: Create secrets configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: |
          # Create the cloud directory if it doesn't exist
          New-Item -Path "src/cloud" -ItemType Directory -Force
          
          # Create secrets_config.yaml with GitHub secrets
          $secretsContent = @"
          # AWS Credentials
          aws:
            access_key_id: $env:AWS_ACCESS_KEY_ID
            secret_access_key: $env:AWS_SECRET_ACCESS_KEY
            region: us-east-2

          # Google OAuth
          google_oauth:
            client_id: $env:GOOGLE_CLIENT_ID
            client_secret: $env:GOOGLE_CLIENT_SECRET
          "@
          
          Set-Content -Path "src/cloud/secrets_config.yaml" -Value $secretsContent
          Write-Host "Created secrets configuration for build"