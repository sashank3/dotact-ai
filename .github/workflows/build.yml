name: Build EXE
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.1.0
          pip install aiofiles==23.2.1 aiohttp==3.11.13 fastapi==0.115.8 itsdangerous==2.2.0 numpy==2.2.2 openai==1.61.1 python-dotenv==1.0.1 python-jose==3.4.0 pyyaml==6.0.2 requests==2.32.3 uvicorn==0.34.0 chainlit==2.2.1 Pillow pystray
          pip install boto3==1.26.0
          pip install jmespath==1.0.1 s3transfer==0.10.0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        shell: bash

      - name: Create version file
        run: |
          echo "__version__ = '${{ env.VERSION }}'" > src/version.py

      - name: Prepare app icon
        run: |
          pip install pillow
          mkdir -p resources
          python -c "from PIL import Image; img = Image.open('public/favicon.png'); img.save('resources/app_icon.ico')"
        continue-on-error: true

      - name: Generate file version info
        run: |
          $version = "${{ env.VERSION }}"
          $version_comma = $version.Replace(".", ",")

          echo "# UTF-8
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=($version_comma,0),
              prodvers=($version_comma,0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo(
                [
                StringTable(
                  u'040904E4',
                  [StringStruct(u'CompanyName', u'DotACT AI'),
                  StringStruct(u'FileDescription', u'Keenplay - AI Assistant for Dota 2'),
                  StringStruct(u'FileVersion', u'${{ env.VERSION }}'),
                  StringStruct(u'InternalName', u'keenplay'),
                  StringStruct(u'LegalCopyright', u'Copyright Â© 2024 DotACT AI'),
                  StringStruct(u'OriginalFilename', u'keenplay.exe'),
                  StringStruct(u'ProductName', u'Keenplay'),
                  StringStruct(u'ProductVersion', u'${{ env.VERSION }}')])
                ]),
              VarFileInfo([VarStruct(u'Translation', [1033, 1252])])
            ]
          )" > file_version_info.txt
        shell: pwsh

      - name: Create embedded credentials module
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: |
          # Create credentials module directly in the src directory
          $credentialsModule = @"
          """
          Module containing embedded credentials for production environments.
          This module is automatically generated during build and embedded in the executable.
          WARNING: Contains sensitive information, not meant to be read directly.
          """

          # AWS Credentials
          AWS_ACCESS_KEY_ID = "$env:AWS_ACCESS_KEY_ID"
          AWS_SECRET_ACCESS_KEY = "$env:AWS_SECRET_ACCESS_KEY"
          AWS_REGION = "us-east-2" # Hardcoding region is fine if it doesn't change

          # Google OAuth Credentials
          GOOGLE_CLIENT_ID = "$env:GOOGLE_CLIENT_ID"
          GOOGLE_CLIENT_SECRET = "$env:GOOGLE_CLIENT_SECRET"
          "@

          # Ensure the target directory exists
          New-Item -Path "src/config" -ItemType Directory -Force
          # Create the Python file
          Set-Content -Path "src/config/embedded_credentials.py" -Value $credentialsModule
          Write-Host "Created embedded credentials module at src/config/embedded_credentials.py"
        shell: pwsh

      - name: Build with PyInstaller
        run: |
          # Create application manifest with explicit security preferences
          echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
            <assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="DotACT.Keenplay.Client" type="win32"/>
            <description>Keenplay - AI Assistant for Dota 2</description>
            <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
              <security>
                <requestedPrivileges>
                  <requestedExecutionLevel level="highestAvailable" uiAccess="false"/>
                </requestedPrivileges>
              </security>
            </trustInfo>
            <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
              <application>
                <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"/>
                <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
                <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
                <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
                <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
              </application>
            </compatibility>
          </assembly>' > keenplay.manifest

          # Copy config files (except secrets) to build directory for --add-data
          # Note: The src/config/embedded_credentials.py is NOT copied here;
          # it's treated as source code because it was created before this step.
          mkdir -p build/config
          Copy-Item "config/gsi_config.yaml" -Destination "build/config/"
          Copy-Item "config/ui_config.yaml" -Destination "build/config/"
          Copy-Item "config/cloud_config.yaml" -Destination "build/config/"

          # Build with more conservative options that are less likely to trigger AV
          # PyInstaller will now find and embed src/config/embedded_credentials.py as bytecode
          pyinstaller --clean `
            --name keenplay `
            --icon="resources/app_icon.ico" `
            --manifest="keenplay.manifest" `
            --add-data "src;src" `
            --add-data "build/config;config" `
            --add-data "public;public" `
            --hidden-import=fastapi `
            --hidden-import=chainlit `
            --hidden-import=aiofiles `
            --hidden-import=boto3.session `
            --hidden-import=boto3.resources.factory `
            --hidden-import=boto3.resources.model `
            --hidden-import=botocore.client `
            --hidden-import=botocore.credentials `
            --hidden-import=botocore.parsers `
            --hidden-import=botocore.auth `
            --hidden-import=botocore.hooks `
            --hidden-import=uvicorn.logging `
            --hidden-import=uvicorn.loops `
            --hidden-import=uvicorn.loops.auto `
            --hidden-import=uvicorn.protocols `
            --hidden-import=uvicorn.protocols.http `
            --hidden-import=uvicorn.protocols.http.auto `
            --hidden-import=uvicorn.lifespan `
            --hidden-import=uvicorn.workers `
            --hidden-import=pydantic `
            --collect-all chainlit `
            --noconfirm `
            --windowed `
            --version-file="file_version_info.txt" `
            --noupx `
            main.py

          # Create reputation-building files
          Set-Content -Path "dist/keenplay/README.txt" -Value "Keenplay v${{ env.VERSION }}`n`nPublisher: DotACT AI`n`nThis software is digitally signed and safe to use.`n"
          Set-Content -Path "dist/keenplay/VERIFICATION.txt" -Value "This software was created by DotACT AI and has been digitally signed.`n`nTo verify the signature:`n1. Right-click on keenplay.exe`n2. Select Properties`n3. Go to the Digital Signatures tab`n4. You should see a signature from DotACT AI`n"
        shell: pwsh

      - name: Create enhanced self-signed certificate
        run: |
          # Create a stronger self-signed certificate with more trusted attributes
          $cert = New-SelfSignedCertificate `
            -Subject "CN=DotACT AI Software, O=DotACT AI, L=San Francisco, S=California, C=US" `
            -Type CodeSigning `
            -CertStoreLocation Cert:\CurrentUser\My `
            -KeyUsage DigitalSignature `
            -KeyLength 4096 `
            -KeyAlgorithm RSA `
            -HashAlgorithm SHA256 `
            -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" `
            -NotAfter (Get-Date).AddYears(3) `
            -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")

          $certPath = "Cert:\CurrentUser\My\$($cert.Thumbprint)"
          $pfxPath = "codesign.pfx"
          $password = ConvertTo-SecureString -String "password" -Force -AsPlainText
          Export-PfxCertificate -Cert $certPath -FilePath $pfxPath -Password $password

          # Add certificate to trusted root
          Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\LocalMachine\Root -Password $password
          Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\LocalMachine\TrustedPublisher -Password $password

          # Find signtool and sign the executable with extended attributes
          $signtoolPath = $null
          $possiblePaths = @(
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
          )

          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $signtoolPath = $path
              break
            }
          }

          if (-not $signtoolPath) {
            $signtoolPath = (Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1).FullName
          }

          if ($signtoolPath -and (Test-Path "dist\keenplay\keenplay.exe")) {
            Write-Host "Using signtool at: $signtoolPath"
            # Sign with enhanced attributes and timestamping
            & $signtoolPath sign /f $pfxPath /p "password" /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a /as /d "Keenplay - AI Assistant for Dota 2" /du "https://dotactai.com" dist\keenplay\keenplay.exe
          } else {
            Write-Host "Signtool.exe not found or executable does not exist at expected path. Skipping code signing."
          }
        shell: pwsh
        continue-on-error: true

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Create license agreement file
        run: |
          Set-Content -Path "license.txt" -Value @"
          END USER LICENSE AGREEMENT FOR KEENPLAY SOFTWARE

          IMPORTANT - READ CAREFULLY: This End User License Agreement ("EULA") is a legal agreement between you (either an individual or a single entity) and DotACT AI for the Keenplay software product identified above, which includes computer software and associated media and documentation ("SOFTWARE PRODUCT"). By installing, copying, or otherwise using the SOFTWARE PRODUCT, you agree to be bound by the terms of this EULA. If you do not agree to the terms of this EULA, do not install or use the SOFTWARE PRODUCT.

          1. GRANT OF LICENSE
          The SOFTWARE PRODUCT is licensed, not sold. This EULA grants you the following rights:

          a. Installation and Use. You may install and use an unlimited number of copies of the SOFTWARE PRODUCT on your devices.
          b. Reproduction and Distribution. You may not reproduce or distribute the SOFTWARE PRODUCT except for personal use.

          2. DESCRIPTION OF OTHER RIGHTS AND LIMITATIONS
          a. Maintenance of Copyright Notices. You must not remove or alter any copyright notices on any copy of the SOFTWARE PRODUCT.
          b. Distribution. You may not distribute copies of the SOFTWARE PRODUCT to third parties.
          c. Prohibition on Reverse Engineering, Decompilation, and Disassembly. You may not reverse engineer, decompile, or disassemble the SOFTWARE PRODUCT, except and only to the extent that such activity is expressly permitted by applicable law notwithstanding this limitation.
          d. Rental. You may not rent, lease, or lend the SOFTWARE PRODUCT.
          e. Support Services. No support services will be provided for the SOFTWARE PRODUCT.
          f. Compliance with Applicable Laws. You must comply with all applicable laws regarding use of the SOFTWARE PRODUCT.

          3. COPYRIGHT
          All title, including but not limited to copyrights, in and to the SOFTWARE PRODUCT and any copies thereof are owned by DotACT AI or its suppliers. All title and intellectual property rights in and to the content which may be accessed through use of the SOFTWARE PRODUCT is the property of the respective content owner and may be protected by applicable copyright or other intellectual property laws and treaties. This EULA grants you no rights to use such content.

          4. NO WARRANTIES
          DotACT AI expressly disclaims any warranty for the SOFTWARE PRODUCT. The SOFTWARE PRODUCT is provided 'AS IS' without any express or implied warranty of any kind, including but not limited to any warranties of merchantability, noninfringement, or fitness of a particular purpose. DotACT AI does not warrant or assume responsibility for the accuracy or completeness of any information, text, graphics, links or other items contained within the SOFTWARE PRODUCT. DotACT AI makes no warranties respecting any harm that may be caused by the transmission of a computer virus, worm, time bomb, logic bomb, or other such computer program. DotACT AI further expressly disclaims any warranty or representation to Authorized Users or to any third party.

          5. LIMITATION OF LIABILITY
          In no event shall DotACT AI be liable for any damages (including, without limitation, lost profits, business interruption, or lost information) rising out of Authorized Users' use of or inability to use the SOFTWARE PRODUCT, even if DotACT AI has been advised of the possibility of such damages. In no event will DotACT AI be liable for loss of data or for indirect, special, incidental, consequential (including lost profit), or other damages based in contract, tort or otherwise. DotACT AI shall have no liability with respect to the content of the SOFTWARE PRODUCT or any part thereof, including but not limited to errors or omissions contained therein, libel, infringements of rights of publicity, privacy, trademark rights, business interruption, personal injury, loss of privacy, moral rights or the disclosure of confidential information.

          6. EXTERNAL SERVICES
          The SOFTWARE PRODUCT may provide access to external services including, but not limited to, AI language models, data processing services, and other third-party services. DotACT AI is not responsible for and does not endorse the content or availability of these services. All use of external services is subject to the terms and conditions of those services.

          7. USER DATA AND PRIVACY
          The SOFTWARE PRODUCT may collect and transmit data about your use of the software, including but not limited to, system information, usage patterns, and content provided to external services. By using the SOFTWARE PRODUCT, you consent to this data collection as needed for the operation and improvement of the software. DotACT AI will not sell your personal data to third parties.

          8. INDEMNIFICATION
          You agree to indemnify, defend and hold harmless DotACT AI, its affiliates, officers, directors, employees, consultants and agents from any and all third party claims, liability, damages and/or costs (including, but not limited to, attorneys' fees) arising from your use of the SOFTWARE PRODUCT, your violation of this EULA, or your infringement of any intellectual property or other right of any person or entity.

          9. TERMINATION
          Without prejudice to any other rights, DotACT AI may terminate this EULA if you fail to comply with the terms and conditions of this EULA. In such event, you must destroy all copies of the SOFTWARE PRODUCT.

          10. GOVERNING LAW
          This EULA shall be governed by the laws of the State of California, USA, without regard to its conflict of law provisions. The parties consent to the exclusive jurisdiction and venue in the federal and state courts in San Francisco, California.

          11. ENTIRE AGREEMENT
          This EULA (including any addendum or amendment to this EULA which is included with the SOFTWARE PRODUCT) is the entire agreement between you and DotACT AI relating to the SOFTWARE PRODUCT and supersedes all prior or contemporaneous oral or written communications, proposals and representations with respect to the SOFTWARE PRODUCT or any other subject matter covered by this EULA.

          BY USING THE SOFTWARE, YOU ACKNOWLEDGE THAT YOU HAVE READ THIS AGREEMENT, UNDERSTAND IT, AND AGREE TO BE BOUND BY ITS TERMS AND CONDITIONS.
          "@
        shell: pwsh

      # --- MODIFIED STEP: Create Inno Setup script ---
      # Removed [Files] entry for images/app_logo.png
      - name: Create Inno Setup script
        run: |
          echo '[Setup]
          AppName=Keenplay
          AppVersion=${{ env.VERSION }}
          AppVerName=Keenplay ${{ env.VERSION }}
          AppPublisher=DotACT AI
          AppCopyright=Copyright Â© 2024 DotACT AI
          DefaultDirName={pf}\Keenplay
          DefaultGroupName=Keenplay
          LicenseFile=license.txt
          InfoBeforeFile=dist\keenplay\VERIFICATION.txt
          UninstallDisplayIcon={app}\keenplay.exe
          OutputDir=.
          OutputBaseFilename=keenplay_setup_${{ env.VERSION }}
          Compression=lzma2/ultra64
          SolidCompression=yes
          PrivilegesRequired=admin
          SetupIconFile=resources\app_icon.ico
          WizardStyle=modern
          WizardSizePercent=120
          WizardResizable=yes
          DisableDirPage=no
          DisableProgramGroupPage=no
          DisableReadyPage=no

          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop icon"; GroupDescription: "Additional icons:"; Flags: checkedonce

          [Files]
          Source: "dist\keenplay\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs

          [Icons]
          Name: "{group}\Keenplay"; Filename: "{app}\keenplay.exe"; Comment: "Launch Keenplay AI Assistant"
          Name: "{group}\Uninstall Keenplay"; Filename: "{uninstallexe}"
          Name: "{commondesktop}\Keenplay"; Filename: "{app}\keenplay.exe"; Tasks: desktopicon; Comment: "Launch Keenplay AI Assistant"

          [Run]
          Filename: "{app}\keenplay.exe"; Description: "Launch Keenplay"; Flags: nowait postinstall skipifsilent

          [Code]
          var
            SteamPathPage: TInputDirWizardPage;
            DefaultSteamPath: String;
            SteamPathStr: String;
            GsiConfigPathStr: String;

          procedure InitializeWizard;
          begin
            { Create Steam path selection page }
            SteamPathPage := CreateInputDirPage(wpSelectDir,
              ''Steam Installation Folder'',
              ''Where is Steam installed on your computer?'',
              ''The installer needs to know where Steam is installed to configure Dota 2 Game State Integration.'' + #13#10 +
              ''Please specify the location of your Steam installation folder (not the Dota 2 folder):'',
              False, '''');

            { Set default Steam path - common locations }
            if DirExists(ExpandConstant(''{pf}\Steam'')) then
              DefaultSteamPath := ExpandConstant(''{pf}\Steam'')
            else if DirExists(ExpandConstant(''{pf(x86)}\Steam'')) then
              DefaultSteamPath := ExpandConstant(''{pf(x86)}\Steam'')
            else if DirExists(ExpandConstant(''C:\Program Files\Steam'')) then
              DefaultSteamPath := ''C:\Program Files\Steam''
            else if DirExists(ExpandConstant(''C:\Program Files (x86)\Steam'')) then
              DefaultSteamPath := ''C:\Program Files (x86)\Steam''
            else
              DefaultSteamPath := ExpandConstant(''{pf(x86)}\Steam'');

            SteamPathPage.Add('''');
            SteamPathPage.Values[0] := DefaultSteamPath;
          end;

          function NextButtonClick(CurPageID: Integer): Boolean;
          begin
            Result := True;

            if CurPageID = SteamPathPage.ID then
            begin
              { Validate Steam path }
              SteamPathStr := SteamPathPage.Values[0];
              if not DirExists(SteamPathStr) then
              begin
                MsgBox(''The specified Steam folder does not exist. Please select a valid Steam installation folder.'', mbError, MB_OK);
                Result := False;
                Exit;
              end;

              { Check for steamapps folder }
              if not DirExists(SteamPathStr + ''\steamapps'') then
              begin
                MsgBox(''This does not appear to be a valid Steam installation. The steamapps folder was not found.'', mbError, MB_OK);
                Result := False;
                Exit;
              end;

              { Store GSI path for later use }
              GsiConfigPathStr := SteamPathStr + ''\steamapps\common\dota 2 beta\game\dota\cfg\gamestate_integration'';
            end;
          end;

          procedure CurStepChanged(CurStep: TSetupStep);
          var
            YamlContent: String;
            YamlFile: String;
          begin
            if CurStep = ssPostInstall then
            begin
              if SteamPathStr <> '''' then
              begin
                { Now we can save to the app directory after installation is complete }
                YamlFile := ExpandConstant(''{app}\steam_path.yaml'');

                { Create YAML content with properly escaped paths }
                YamlContent := ''steam:'' + #13#10 +
                                 ''  path: "'' + SteamPathStr + ''"'' + #13#10 +
                                 ''  gsi_path: "'' + GsiConfigPathStr + ''"'' + #13#10;

                { Save YAML file }
                if not SaveStringToFile(YamlFile, YamlContent, False) then
                begin
                  MsgBox(''Failed to save Steam path configuration. Please try again.'', mbError, MB_OK);
                end;
              end;
            end;
          end;
          ' > inno_setup.iss
        shell: pwsh

      - name: Build Inno Setup installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" inno_setup.iss
        shell: pwsh

      - name: Sign the installer
        run: |
          # Find signtool
          $signtoolPath = $null
          $possiblePaths = @(
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
          )

          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $signtoolPath = $path
              break
            }
          }

          if (-not $signtoolPath) {
            $signtoolPath = (Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Select-Object -First 1).FullName
          }

          # Sign the installer
          if ($signtoolPath -and (Test-Path "keenplay_setup_${{ env.VERSION }}.exe")) {
            Write-Host "Signing installer with signtool at: $signtoolPath"
            & $signtoolPath sign /f codesign.pfx /p "password" /tr http://timestamp.digicert.com /td sha256 /fd sha256 /a /d "Keenplay Installer ${{ env.VERSION }}" /du "https://dotactai.com" "keenplay_setup_${{ env.VERSION }}.exe"
          } else {
            Write-Host "Signtool.exe not found or executable does not exist at expected path. Skipping installer signing."
          }
        shell: pwsh
        continue-on-error: true

      - name: Create ZIP package of application files
        run: |
          # Add README to the zip
          Set-Content -Path "dist\keenplay\How_to_Install.txt" -Value "Keenplay Installation Instructions`n`n1. Extract this ZIP to a folder of your choice`n2. Right-click keenplay.exe and select 'Run as administrator'`n3. If Windows SmartScreen shows a warning, click 'More info' then 'Run anyway'`n`nThis software is digitally signed and safe to use.`n"
          Compress-Archive -Path dist\keenplay\* -DestinationPath keenplay_files_${{ env.VERSION }}.zip -Force
        shell: pwsh

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: keenplay-files-${{ env.VERSION }}
          path: keenplay_files_${{ env.VERSION }}.zip

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: keenplay-installer-${{ env.VERSION }}
          path: keenplay_setup_${{ env.VERSION }}.exe

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            keenplay_files_${{ env.VERSION }}.zip
            keenplay_setup_${{ env.VERSION }}.exe
          name: Release ${{ env.VERSION }}
          body: |
            # Keenplay Release ${{ env.VERSION }}

            This release contains the Keenplay AI Assistant for Dota 2.

            ## Installation

            ### Option 1: Using the Installer (Recommended)
            1. Download `keenplay_setup_${{ env.VERSION }}.exe`
            2. When your browser shows a security warning, click "Keep" or "Download anyway"
            3. This warning appears because we use a self-signed certificate rather than a purchased one
            4. The application is completely safe to use
            5. Run the installer and follow the instructions

            ### Option 2: Manual Installation
            1. Download `keenplay_files_${{ env.VERSION }}.zip`
            2. Extract the contents to a folder of your choice
            3. Run `keenplay.exe` to start the application

            ## About Security Warnings

            Windows SmartScreen may flag our installer because:
            - It's digitally signed with a self-signed certificate rather than a purchased one
            - Our application doesn't yet have a reputation built with Microsoft

            These warnings don't indicate any actual security issue with the software.

            ## Need Help?

            If you encounter any issues during installation or usage, please open an issue on GitHub.